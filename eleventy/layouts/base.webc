<!DOCTYPE html>
<html lang="en">
<script webc:setup>
    /**
     * @type {Map<string, number>}
     */
    const levelsByKey = new Map();

    /**
     * There has to be at least one orphan left over at the end which is the root page.
     * @type {Map<string, string[]>}
     */
    const orphansByParent = new Map()

    /** @type {Record<string, string>} */
    const keysByPath = {};

    /**
     * @param {string} key
     * @param {number} level
     */
    function setLevel(key, level) {
        levelsByKey.set(key, level);

        // Give orphans their parent back
        const orphans = orphansByParent.get(key);
        if (orphans === undefined) return;

        for (const orphan of orphans) {
            const orphanLevel = levelsByKey.get(orphan);
            if (orphanLevel !== undefined) throw new Error(`Orphan "${orphan}" has already a level (${orphanLevel})`);
            // Recursive call because the orphan might be a parent of other orphans
            setLevel(orphan, level + 1);
        }
    }

    for (const node of collections.all) {
        if (!node.data.hierarchy) continue;

        const { key, parent } = node.data.hierarchy;

        keysByPath[node.url] = key;

        let level = levelsByKey.get(key);
        if (level !== undefined) throw new Error(`Duplicate key "${key}"`);

        let parentLevel;
        if (parent)
            parentLevel = levelsByKey.get(parent);

        if (parentLevel === undefined && parent !== undefined) {
            const orphans = orphansByParent.get(parent);
            if (orphans === undefined) orphansByParent.set(parent, [key]);
            else orphans.push(key);
            continue;
        }

        if (parentLevel !== undefined) level = parentLevel + 1;
        else level = 0;

        setLevel(key, level);
    }

    // Map to object to JSON stringify
    /** @type {Record<string, number>} */
    const levelsByKeyObject = {};
    for (const [key, level] of levelsByKey) {
        levelsByKeyObject[key] = level;
    }

    const levelsByKeyJson = JSON.stringify(levelsByKeyObject);
    const keysByPathJson = JSON.stringify(keysByPath);
</script>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title @text="this.title"></title>
    <!--- This gets processed by the bundler with postcss and tailwindcss --->
    <link rel="stylesheet" href="../index.css">
    <meta webc:if="this.description" name="description" :content="this.description">
    <meta webc:if="this.keywords" name="keywords" :content="this.keywords">
    <meta name="author" :contents="this.author ?? page.author">
    <meta name="color-scheme" content="light">
    <link rel="icon" href="/images/logo.svg" type="image/svg+xml">
    <!--- Alternatively use getBundleFileUrl('css') to not inline but use a separate file --->
    <style @raw="getBundle('css')" webc:keep></style>
    <script @raw="getBundle('js')" webc:keep></script>
    <style webc:bucket="defer">
        @media (prefers-reduced-motion: no-preference) {
            @view-transition {
                navigation: auto;
            }
        }

        ::view-transition-group(root) {
            /* animation-duration: 2s; */
        }

        @keyframes slide-in-right {
            from {
                translate: 100vw 0;
            }
        }

        @keyframes slide-out-right {
            to {
                translate: 100vw 0;
            }
        }

        @keyframes slide-out {
            to {
                translate: -100vw 0;
            }
        }

        @keyframes fade-in {
            from {
                opacity: 0;
            }
        }

        @keyframes fade-out {
            to {
                opacity: 0;
            }
        }

        [data-direction="forward"] {
            animation-timing-function: ease-in-out;
            animation-duration: 250ms;

            &::view-transition-old(root) {
                animation-name: fade-out;
            }

            &::view-transition-new(root) {
                animation-name: slide-in-right, fade-in;
            }
        }

        [data-direction="backward"] {
            animation-timing-function: ease-in-out;
            animation-duration: 250ms;

            &::view-transition-old(root) {
                animation-name: slide-out-right, fade-out;
            }

            &::view-transition-new(root) {
                animation-name: fade-in;
            }
        }
    </style>
    <!--- https://darn.es/you-should-add-a-generator-tag-to-your-eleventy-site/ --->
    <meta name="generator" webc:if="eleventy.generator" :content="eleventy.generator">
    <!--- Umami analytics --->
    <script webc:keep defer src="https://cloud.umami.is/script.js"
        data-website-id="2947a8cc-cb3f-46fc-a0b0-036d09e7e3cd"></script>
</head>

<!--- Should eleventy fail when bodystyles is undefined or null or should I open a PR? --->
<!--- If :class is an empty string the attribute won't be rendered --->

<body :class="(bodystyles ?? '')">

    <template @html="this.content" webc:nokeep></template>
    <!--- Load these at the end as they are progressive enhancements and not necessary --->
    <style @raw="getBundle('css', 'defer')" webc:keep></style>
</body>

</html>

<script @text="`const levelsByKey = ${levelsByKeyJson};`"></script>
<script @text="`const keysByPath = ${keysByPathJson};`"></script>
<script>
    window.addEventListener("pagereveal", async (event) => {
        if (!event.viewTransition) return;

        const from = navigation.activation.from.url;
        const to = navigation.activation.entry.url;

        const fromPath = new URL(from).pathname;
        const toPath = new URL(to).pathname;

        console.debug({ fromPath, toPath });

        const fromKey = keysByPath[fromPath];
        const toKey = keysByPath[toPath];
        console.debug({ fromKey, toKey });

        const fromLevel = levelsByKey[fromKey];
        const toLevel = levelsByKey[toKey];
        console.debug({ fromLevel, toLevel });

        if (fromLevel === -1 || toLevel === -1) return;

        const direction = fromLevel < toLevel ? "forward" : "backward";

        document.documentElement.dataset.direction = direction;

        await event.viewTransition.finished;

        console.debug("transition finished");
        delete document.documentElement.dataset.direction;
    });
</script>